2.Мәтіндік файлға мәліметтер жазу
3.Мәтіндік файлға мәліметтер жазу
4.Мәтiндiк файлдан мәлiметтердi оқуІІ
Мәтiндiк файлдан мэлiметтердi оку (жалғасы)ІІ
Әртүрлі базалық типтерді біріктіру
Модуль құрылымы        Қорытынды        Пайдаланылған әдебиеттерКіріспеTurbo Pascal – жоғарғы деңгейлі программалау жүйесі
Оның тұңғыш нұсқасын 1970 жылы швейцрия физигі Niklaus Wirth  ұсынған.Автор тілді алғашқы арифметикалық есептеу машинасын жасаған француздың ұлы ғалымы Блез Паскальдің құрметіне Паскаль деп  атап , тіл атауын үнемі  бас әріппен жазылуын сұраған.Кейінен тілдің көптеген нұсқалары жарық көреді
Кейінен тілдің көптеген нұсқалары жарық көреді.Солардың ішінде 1983 жылы Борланд корпорациясының талантты қызметкері Андерсон Хейлсбергтің жасаған жаңа үлгісі Turbo Pascal программалаушылар арасында жоғарғы сұранысқа ие болды
     Бейсик тілі сияқты, Паскаль оқып-үйренуге жеңіл, түрлі салалық информациямен жұмыс істеуде нәтижелі болғандықтан, дүние жүзінде көп тараған тілдердің бірі Turbo Pascal программалау тілінің басқа тілдер сияқты өзіне тән алфавиті бар
     Жоғарғы деңгейлі программалау тілдерінің бірі − Паскаль
 Қазіргі кезде Паскаль тілінің кеңейтілген ондаған диалектісі бар, оның ішінде IBM PC-ге үйлесімді дербес компьютерлер жұмыс істей алатын Турбо Паскаль диалектісінің варианттары да жеткілікті
Turbo Pascal жүйесінде қарапайым есептерді шешудің программасынан бастап, күрделі мәліметтер қорын құрудың сан қырлы жұмыстары жүргізіледі
     Паскаль тілі бұрын құрылған (Фортран, Алгол және т.б.) программалау тілдерінен маңызды ерекшелігі ол құрылымдық программалау идеясын өмірге біртіндеп енгізу
     Файлдармен жұмыс1 Файлдардың түрлеріОсыған дейін, біз мәліметтерді пернетақтадан негізіп, оларды экранға шығардық, программа жұмысы кезінде олар компьютердің оперативті жадында сақталатын да, есептеулер біткеннен кейін бұл мәліметтер жоғалып кетеьін
Жұмыс нәтижесін келешекте пайдалана алу үшін, мысалы, оларды есептеулерге пайдалану үшін немесе жңа мәліметтерді алу үшін, оларды есте сақтап қалу керек
Ондай тәсілдердің ьірі мынадай: нәтиже экранға шыққан соң қолға қаламсап (қарындаш) және бір бет қағаз алып, бұл мәліметтерді жазып алу
“Дербес компьютерлер” дәуірінің басында оларды “үй тапсырмасы” деп атаған да, шын мәнінде солай болған
Қазіргі кездегі дербес компьютерлердің барлығы ақпаратты сақтауға арналған арнайы құрылғылармен жабдықталған
Қызметтеріне қарай оларды: магниттік ақпарат тасымалдаушылар немесе жазылатын CD- дискілер деп атайды
Ақпаратты сақтау осы тасымалдаушыларда ұйымдастырылады, бұл жағдайда біз алған нәтижелерді солардың жадында сақтаймыз
Барлық мәліметтер осы тасымалдаушыларда файлдар түрінде сақталады
	Файл дегеніміз – мәліметтер сақтауға арналған сыртқы тасымалдаушыдағы жадының ат қойылған аймағы (бөлігі).	File (ағылшын тілінен аударылғанда) бума, іс қағаздар жинағы, сонымен қатар ақпаратты сақтау деген мағынаны білдіреді.	Borland Pascal-да файлдарды екі негізгі белгісі бойынша топтастыруға болады:a)	файлдың типі бойынша (оның логикалық құрылымына )b)	файл элементтеріне қатынау тәсілі бойыншаТиптері бойынша файлдар шартты тұрде үш түрге бөлінеді:	мәтіндік файл;	типтік файл;	типтік емес файл.Біз көбінесе мәтіндік және типтік файлдармен жұмыс істейміз.Қатынау тәсілі бойынша файлдар келесідей бөлінеді:	Тікелей қатынау файлдары	Кезекпен қатынау файлдарыОлардың айырмашылығы тікелей қатынау файлдарында арнайы процедуралар  және функцияларды  пайдалана отырып, мәліметтерді, олардың файлдағы орнына тәуелсіз, оқуға немесе жазуға болады, ал кезекпен қатынау файлында оның ортасында немесе соңында тұрған мәліметті оқу үшін, оның алдындағы мәліметтердің барлығын оқуға тура келеді
Мәтіндік файлдар кезекпен қатынау файлдарына жатады, ал типтік файлдар тікелей қатынау файлдарыа жатады.2
Бір өлшемді массив.Ең қарапайым файл типі мәтіндік файл болып табылады
Бұл файлдағы мәліметтер типтік және типтік емес файлдардағыдай машиналық кодта емес, сан, әріп және басқа пернетақта символдары түрінде (ASCII кодында) беріледі
Сондықтан мұндай файлдар мазмұны оңай қаралады, оңай өзгереді және оларды кез келген мәтіндік редактордың, соның ішінде Borland Pascal ортасының да көмегімен өзгертуге болады
Өздеріңіз білетіндей 2.1.2.-ні  қара, мәтінді теру кезінде жаңа жолды енгізу үшін “Enter” пернесін басу керек, осы кезде арнайы код гинерацияланады—ол жол соңы коды, ал файлды сыртқы сақтау құрылғысына жазған кезде де арнайы код гинерацияланады—ол файл соңы коды
Мәтіндік файлды оқығанда бұл кодтар көрінбейді.	Келесі есепті шешіп көрейік: Пернетақтадан бірнеше сандар енгізіп, оларды “mayFile.in” атты мәтіндік типтегі файлға жазу керек.	Есепті кезеңдерге бөлейік:1)	пернетақтадан мәліметтерді енгізу2)	оларды   “mayFile.in” атты файлға жазу керек.Бірінші кезеңді орындау үшін:	пернетақтадан енгізілетін сандардың мөлшерін (массив өлшемін) көрсету керек	Сан мөлшерін білген соң, параметрлі циклді қолдану арқылы массив элементтеріне осы сандардың нақты мәндерін меншіктеймізОсы әрекеттерді орындау үшін қолданылатын айнымалыларды сипаттаймыз
Айталық, санымыз 100-ден көп емес және олар басқа да процедураларда қолданылатындықтан, оларды ауқымды айнымалыларды баяндау блогында сипаттаймыз.рrogram Misal_F1;                                                var                                                San: array [1..100] of integer;                                                                      i, SanMolcher: integer;Мәліметтерді енгізу процедурасы  келесі түрде болады:procedure init; begin readln (SanMolcheri);                                   for i:=1 to SanMolcheri do                                   begin                                     write (“San[“,i,”]=’);                                     readln(San[i]);                                   end;Мәліметтерді өңдеу процедурасы әзірге бізге қажет емес, сондықтан ол қызмет атқармай-ақ қойсын
                          procedure work ;                              begin                               end;   	Енді екіншісі кезеңді қарастырайық, яғни мәліметтерді «mayFile.in» атты мәтіндік типтегі файлға жазу керек
Алдымен өз файлмызды байланыстыратын, айналымның атауын беру керек.Айталық, ол айналымның атауы FileOut болсын, содан кейін біз оны мәтіндік файл ретінде сипаттаумыз керек
Бұл айнымалыны шығару процедурасында пайдаланатын болғандықтан, оны жергілікті айнымалы ретінде сипаттаймыз:                            var                            FileOut: text;Одан кейін біз программаға, “мәтіндік” типтегі FileOut атты айнымалының, біздің “mayFile
in” атты нақты файлмызды белгілейтінін көрсетуіміз керек
Ол үшін assign(Name Var, Name File)процедурасы қолданылады
Name Var—бұл файлды белгілеу үшін берілген айнымалы аты, біздің жағдайда Name Var—дың орнына File Out сөзін жазасыз
NameFile—бұл біз жұмыс істейтін файлдың аты, біздің жағдайда”mayFile.in”.	Файл аты мен оның кеңейтілуінен  басқа орналасқан орнына қарай сипатталатыны да белгілі
Ал егер толық аты берілмеген жағдайда, үнсіз келісім бойынша сіздің программаңыз  орналасқан ағымдағы каталог қолданылады
Енді сіз берілген файлды ашып, оған мәліметтер жазылатындығын көрсетуіңіз керек
Ол үшін rewrite (Name Var)процедурасы қолданылады
Мұндағы, Name Var-бұл файлды белгілеу  үшін берілген айнымалы аты, біздің жағдайда Name Var—дың орнына  FileOut   атауы жазылады
 rewrite(Name Var) процедурасы—файлды жазу үшін ашады және көрсеткішті файлдың басына орналастырады.	Енді мәліметтерді файлға жазуға бәрі дайын
Ол үшін бұрынан белгілі Write() және Write() процедураларын қолданамыз
Жазулар экранға емес файлға жазылуы үшін, мәліметтерді шығару бағытын көрсетеміз
Яғни, жақшаның ішіндегі мәліметтерді жазатын айнымалы атауының алдында, бізді файлмен байланыстыратын assign() процедурасындағы айнымалы атуын көрсетеміз
Айталық, берілгендерді шығыс файлына бір жолға жазу керек болсын, бұл жағдайда бірінші мән ол енгізілетін сандардың мөлшері болады
Жаңа  жолға көшу болмайтындықтан,Write() процедурасын қолданып, бастапқыда файлға  SanMolcheri айнымалысын мәнін жазамыз да, содан кейін параметрлі циклді пайдаланып енгізу процедурасында енгізілген сандарды жазамыз
Барлық мәліметтер файлға жазылып болған соң, файлды жазу керек
Ол Close() процедурасының көмегімен орындалады
Close(Name Var) процедурасы—файлдың соңына, файл соңы белгісін жазып, оны жабады
Егер файл Close() процедурасымен жабылмаған болса, онда мәліметтер сақталынбайды
	Мәліметтерді файлға жазу процедурасы қандай болатынын қарастырып көрелік:procedure exi;                                                var                                                FileOut:text;                                                begin                                                assing(FileOut,`mayFile.in`);                                                rewrite(FileOut);                                                write(FileOut, SanMolcheri);                                                  for i=1 to SanMolcheri do                                                    write(FileOut,San[i]);                                                    close(FileOut);                                                    end;негізі программаның мәтіні өзгеріссіз қаладыbegin                                                            init;                                                            work;                                                            exi;                                                            end.Осы программаны ‘Misal_F1’ атымен дискіге жазып, оны орындауға жіберіңіз
Программа жұмысын аяқтағаннан кейін, BP редакторының көмегімен біздің программамыз құрған `mayFile.in` файлын ашып, оның мазмұнын көріңіз
Өкінішке орай сандар файлда бос орынсыз тіркесіп жазылған болып шығады
Мұндай жазбадан қандай сандар жазылғанын анықтау қиындық тудырады
Бұл жағдайды қалай түзетуге болады?   Ол үшін, сандары бір бірінен дәл ажыратудың екі мүмкіндігі бар:а.әрбір мәнді бос орын (``)белгісі арқылы бөліп жазув.әрбір мәнді жаңа жолға жазу (баған бойынша).Бірінші жағдайда енгізілетін айнымалы атауынан кейін бос орын (``) белгісін қоямыз.write(FileOut, SanMolcheri,``);    for i:= to SanMolcheri do          write(FileOut,San[i],``);екінші жағдай үшін, writeln() процедурасын қолданамыз:            writeln(FileOut,SanMolcheri);              for i=1 to SanMolcheri do                  writeln(FileOut, San[i] );Тапсырма1.Енгізілетін мәліметтер `mayFile1.in` атауымен берілген файлға, бір жолға және бос орын арқылы жазылатындай етіп , Misal_F1 программасын өзгерту керек
Жаңа программаны Misal_F2 атымен сақтаңыз.2
Misal_F1 программасында берілген мәліметтер  `mayFile2.in` файлына әрбір мәлімет жаңа жолдан жазылатындай етіп, өзгерту керек
Жаңа програманы Misal_F3 атымен сақтаңыз.3.Пернетақтадан 20 жол мәтін енгізіп, оны шығу файлына жазатын, Misal_F4 атауымен сақталатын программа жазыңыз.3
Мәтіндік файлға мәліметтер жазу.Екі өлшемді массив.	Алдыңғы тақырыпта сіз мәтіндік файлдарды ашуды, оған ақпараттарды жазуды үйреніңіздер
Write()- процедурасын пайдаланып мәліметтерді бір жолға, ал writeln()—процедурасын пайдаланып оларды бағанға жазуды көрдік
Осы білгендерімізді пайдаланып, келесі есепті шешіп көрелік:	Пернетақтадан, өлшемі 100х100, элементтері бүтін сан болатын, екі өлшемді массив енгізіледі
Осы массивті элементтерінің орналасу реті бойынша, `МayFile5.in` атымен, мәтіндік файл  түрінде жазатын, программа жазу керек.Бұл есеп те, алдыңғы тақырыпта қарастырылған есепке ұқсас, екі негізгі кезеңнен тұрады: 1.Пернетақтадан мәліметтерді енгізу2.Оларды атауы `МayFile5.in` болатын, файлға жазу керек
Бірінші кезеңді орындау үшін :•	Пернетақтадан енгізілетін, массив өлшемдерінің нақты мәндерін кіргізу;•	Массив өлшемдерін біле отырып параметрлі цикл операторын қолданып массив элементтеріне нақты мәндерді меншіктеу.Мәліметтерді енгізу процедурасының мәтінін Misal_8 программасынан алуға болады
Ал мәліметтерді өңдеу процедурасы өзгеріссіз қалатындықтан, Misal_F1программасындағыдай болады.Массив элементтерін  `МayFile5.in` файлына жазу процедурасының қандай болатындығын қарастыралық:procedure exi;                                                     var	                                           FileOut: text;                                                     begin                                          {нақтылы файлмен айнымалы арасындағы байланыс}           assing (FileOut,`mayFile.in`);           {файлды жазуға дайындау}           rewrite(FileOut);            {массив өлшемдерiн жазу және курсорды жаңа жолға көшiру}           writeln(FileOut, JolSany,``, BaganSany);           for i=1 to JolSany do               begin           {массив элементтерiн бос орын арқылы жолға жазу}                    for j=1 to BaganSany do                    write(FileOut,San[i,j],``);                {j-циклiн аяақтаған соң, курсорды жаңа жолға көшiру}           writeln(Fileout);             end;          {файлды жабу}          close(FileOut);               end;Негiзгi программа мәтiнiнiң өзгерiсiз қалатындығын айтпаса да болады
Осы  программаны Misal_F5 атымен сактаңыз
Программаны iске қосудың алдымен, келесi әрекеттердi:•	КурсордыExi процедурасын сипаттайтын жолдың басына қойыңыз;•	Негiзгi менюдi Debug iшкi менюiн ашыңыз;•	Add brekpoint… әрекетiн тандаңыз;•	Enter пернесiн басыңыз.Экранға Add brekpoint… (тоқтату нүктесiн қосу) сұхбат терезесi шығады  (2.8-сурет).”Line number” (жол нөмері)өрісінде, курсор тұрған жолдвң нөмірін көрсетіп тұрады, ол Exi  процедурасын сипаттайтын жолдың басын көрсетеді.•	“Ok” батырмасын (сұхбат терезесіндегі) немесе “Enter”  пернесін басыңыз.Редактор терезесіндегі бұл жол басқа түспен бөлінеді
Енді Ctrl+F9 пернелерін басу арқылы программаны іске қосыңыз
Пернетақтадан бастапқы мәндерді енгізіңіз
Мәліметтерді енгізген соң программа жұмысын тоқтатады және компьютердің экранында қайтадан редактор  терезесі шығады
Яғни, біз өзіміздің әрекеттеріміз арқылы программа жұмысын көрсетілген жолда тоқтатуға нұсқау бердік
Жұмысты қайтадан жалғастырву үшін  “Ctrl+F9” пернелерін басуымыз керек немесе F7 пернесін пайдаланған тиімді және Exi процедурасының қалай жұмыс істейтінін бақылап көре аламыз.	Бұл әрекеттер, программаның жеке бөліктерімен жұмыс жасағанда (жүріп өткенде) тиімді, себебі үлкен өлшемді программаларды толығымен жүріп өту жалықтырады және керек емес
Олай болса, программалаудың құрылымдылық тәсілін (1.5 тақырып) қолдай отырып бізде бары:1.	Жеке модульдермен “жұмыс істеу” (программалау) мүмкіндігі.2.	Бір деңгейдегі “ойша” машиналардың тәуелсіздігі, программаның жекеленген  бөліктерін, программаш\ның басқа бөліктеріне әсер етпей тәуелсіз жетілдіруге мүмкіндік береді
программаны жетілдіру, бір түрдегі (ойша) машиналардың басқа қолайлы машиналарға ауысуынан туындайды”.3.	Құрылымдылық программаның жеке бөліктерімен жұмыс жасау.Процедура мәтінімен жүріп өткенде құрама операторлардың жұмысына көңіл бөліңіз
                                                begin                                   {массив элементтерiн бос орын аркылы жолга жазу}                                  forj:=1 to BaganSany do                                  write (FileOut, San[i,j],``);                                  {j-цикл аякталган сон, курсорды жана жолга кошiру}                              writeln(FileOut);                                 end;Тоқтату нүктесін алып тастау үшін, келесі әрекеттерді орындаймыз:•	Негізгі менюді бес\лсенділеңіз;•	Негізгі менюден Debug   ішкі менюін ашыңыз;•	 Breakpoints пернесін басыңыз.•	Enter пернесін басыңыз.Экранда программаға қойылған барлық тоқтату нүктелерінің тізімі көһрсетілген,  Breakpoints… (тоқтату нүктелері) сұхбат терезесі (2.9-сурет) шығады.•	Қажетті элементті белгілеңіз;•	 “Delete” (сұхбат терезесінен) батырмасын немесе  “D” (пернетақтадан) пернесін басыңыз.Белгіленген тоқтату нүктесі тізімнен алынып тасталады
Егер сіз барлық тоқтату нүктесін алып тастағыңыз келсе--   “Clear all” батырмасын басу керек
Тапсырма1.	Егер exi ішкі программасындағы  write және  writeln процедураларындағы бірінші параметр  FileOut көрсетілмесе San массиві қайда жазылған болар еді?2.	Егер осы параметр тек  writeln процедурасында көрсетілмеген болса не өзгереді? 4
Мәтiндiк файлдан мәлiметтердi оқуӨткен тақырыптарда сіздер, мәліметтерді мәтіндік файлға жазуды үйреніңіздер
Енді оларды қайтадан файлдан қалай оқуға болатынын қарастырамыз.	Ол үшін `mayFile1/in`  файлын пайдаланамыз
Мәліметтерді файлға жазу кезіндегідей, біздің файлмызды байланыстыратын айнымалыға атау беруіміз керек
Айталық, ол атау Fileln болсын, содан кейін біз оны мәтіндік файл ретінде сипаттауымыз керек
Бұл айнымалыны біз енгізу процедурасында пайдаланатын болғандықтан, сол процедураның жергілікті айнымалысы ретінде сипаттаймыз
                                                          var      Filelnt:text;Одан кейін біз программада, “мәтіндік типті ” Fileln айнымалысы, біздің`mayFile1.in` атауымен берілген нақтылы файлмызды белгілейтіндігін көрсетуіміз керек
Ол үшін assing(NameVar,NameFile)-процедурасын қолданады............