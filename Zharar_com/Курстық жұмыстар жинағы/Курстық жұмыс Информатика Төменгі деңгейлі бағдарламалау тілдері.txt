Мазмұны1.	Кіріспе                                           2.	Ішкі бағдарламалар.2.1
Функциялар.3.	Төменгі деңгейлі бағдарламалау тілдері
Ассемблер4.	Жоғары деңгейлі бағдарламалау тілдері.	4.1
Паскаль тілінде бағдарламалау.6.	Объектіге бағытталған бағдарламалау.6.1
Си++7.	Қорытынды.8.	Пайдаланылған әдебиеттер тізімі.1
Кіріспе.	Көлемі жағынан орташа болып келетін бағдарламаларды(бірнеше мың жолды код) құрастырғанда құрылымды бағдарламалау қолданылады
Бағдарламаның құрылымы шығарылып жатқан есептің құрылымын көрсету керек, сонда бағдарлама мәтінінен есепті шығару алгоритмі түсінікті болады
Ол үшін қарапайым операторлар жеткіліксіз, алгоритмнің нақты құрылымын дәлірек көрсететін құралдар қажет
Сондықтан бағдарламалауға жаңа ұғым – ішкі бағдарламалар енгізілді
Ішкі бағдарламалар.Қандай да бір алгоритм бойынша жұмыс жасайтын және өзіне негізгі бағдарламаның кез келген бөлігінен қатысуға болатын бағдарламаның жекелеме бөлігін ішкі бағдарлама деп атайды
Ішкі бағдарламалар негізгі бағдарламының ішіндегі кіретін және шығатын орындары бар тұйықталған бөлігі болып табылады
Негізгі бағдарлама мен ішкі бағдарламадағы айнымалылар бір-біріне бағынышты емес
	Ішкі бағдарламаның екі түрі болады – процедуралар және функциялар
Олардың айырмашылығы: процедура белгілі бір операторлар тобын орындаса, функция осыған қоса қандай да бір нәтижені есептеп, оны негізгі бағдарламаға қайта жібереді
Бұл нәтиженің өзіне тән типі болады
Си++ бағдарламалау тілінде «процедура» деген ұғым жоқ, онда тек қана функция қолданылады
Егер функция ешбір нәтиже есептемесе, онда ол «ешқандай» (void) типін қайтарады.	Кез келген бағдарламада бірнеше процедура немесе функция қолданылуы мүмкін
Процедура мен функция сипаттау бөлігінде айнымалылар бөлігінен кейін жарияланады
	Бағдарламаның орындалуы негізгі бағдарламаның операторларынан басталады
Қажет жағдайда ішкі бағдарлама шақырылып, оның операторлары орындалады
Содан соң басқару қайтадан негізгі бағдарламаға беріліп, бағдарламаның орындалуы жалғасады
	Ішкі бағдарлама негізгі бағдарлама сияқты құрылады, яғни бағдарлама атауынан, операторлар бөлігінен және аяқталуынан құрылады.Параметрдің екі түрі болады: формальды және шын мәніндегі параметрлер
Шын мәніндегі параметр деп процедураны шақырар кездегі негізгі бағдарламадағы параметрлерді айтамыз
Ал формальды параметрлер ішкі бағдарламаның атауынан кейін көрсетіледі
Формальды параметрлер тізімінде айнымалылар аталып, олардың типтері көрсетіледі
	    Формальды параметрлерді екіге бөлуге болады:1)	параметр-аргументтер, яғни процедура үшін кіретін мәліметтер;2)	параметр-нәтижелер, осы параметр-нәтижелер арқылы процедураның жұмысының нәтижесін негізгі бағдарламаға қайтарады
Параметр-нәтижелер тізімдерінің алдында var сөзі жазылады
Процедуралар.	Процедура – белгілі ретпен іске асырылатын іс-әрекеттер жиыны, жалпы бағдарламаның бір бөлігі
Процедуралардың жалпы түрі: 	Бейсик	Паскаль	Си++Процедура атауы	SUB (); 	procedure  ();          	void ()         Денесі		begin      ;  end;	{};Аяқталуы	END SUB	жоқ	жоқПаскаль тіліндегі мысал: бір санның факториалын табу.procedure fact (k : integer; var a : integer);var x : integer;begin a:=1;for x:=1 to k do  begin    a:=x*a;  end;end;Мұндағы k – формальды параметр-аргумент, яғни негізгі бағдарламадан келген сан
а – формальды параметр-нәтиже, яғни негізгі бағдарламадан келген санның факториалы.	Паскаль тіліндегі процедураны негізгі бағдарламаның командалар бөлігінен шақырылу командасын қарастырайық: ();  	Мысалы: fact(i,s);2.2
Функциялар.	Функция – басқа мәліметтер алу үшін анықталған мәліметтерге қолданылатын компьютердің іс-әрекеті
Функцияның ерекшелігі – оның орындалуы барысында бір ғана нәтиже шығады, ал кіру параметрлері бірнешеу болуы мүмкін
Нәтиже функция атауымен белгіленіп, негізгі бағдарламаға беріледі
Функциялардың жалпы түрі:	Бейсик	Паскаль	Си++Функция атауы	FUNCTION  (); 	function  ():           	 ()        Денесі		begin      ;  end;	{;};Аяқталуы	END FUNCTION	жоқ	жоқ	Санның квадратын анықтайтын функцияның мысалдары:Бейсик:	FUNCTION SQR % (X AS INTEGER)	SQR% = X*X	END FUNCTIONПаскаль:	function SQR (x : integer) : integer;	begin	SQR:= x*x;	end;Си++:	int SQR (int x)	{	return x*x;	};Паскаль тіліндегі функцияны негізгі бағдарламаның командалар бөлігінен шақырылу командасын қарастырайық: ();  Мысалы: у:=SQR(x);3
Төменгі деңгейлі бағдарламалау тілдері
Ассемблер тілі.	Қандай да нақты жазылған қолданушы программалары басқа тілге түрлендіретін программаларды транслятор деп атайды
Трансляторларды екі топқа бөлуге болады
Егер кіруші тіл сандық машиналық тілдің символикалық репрезентациясы болса, ондаоны ассемблер, ал кіруші тіл ассемблер тілі деп аталады
Егер кіруші тіл жоғары деңгейлі тіл болса, ал шығатын тіл не сандық машиналық тіл, не оның символикалық репрезентациясы, онда транслятор компилятор деп аталады
	Ассемблер тілі – ол әрбір жеткізуі бір машиналық командаға сәйкес болатын тіл
Ассемблер тілінің программасында машиналық командалар мен операторлардың арасында бірмәнді сәйкестік бар
Мұнда екілік және сегіздік аттар мен адрестердің орнына символдық белгілулер қолданылады
	Ассемблер тілінің басқа жоғары деңгейлі тілден айырмашылықтары:	ассемблер тілінің жеткізілуі мен машиналық командалардың арасындағы бірмәнді сәйкестік;	машиналардағы барлық объектілер мен командаларға қатынау;	бір тектес компьютерлердегі жұмыс
   Ассемблер тілін қолданудың екі негізгі ерекшеліктері бар: жоғары өнімділігі мен машинаға қатынау
Көбіне программада барлық кодтың азғантай пайызы программаның орындалу уақытының көбірек пайызына жауап береді
Мысалы, программаның 10% оның орындалу уақытының 90%-на жауапты
Бұл программаның 10% оны ассемблер тіліне жазып алуды жүзеге асырады
Бұл процессті реттеу(tuning) деп аталады
Ассемблердегі программа көлемі бойынша соншалықты кіші және орындалу жылдамдығы бойынша соншалықты тез болуы мүмкін.Ассемблер тілі мен жоғары деңгейлер тіліндегі программалық салыстырулар (реттеушімен және реттеушісіз)	Программаны жазуға кеткен адам жылының саны	СекундынапрограмманыңорындалуыАссемблер тілі	50	33Жоғары деңгейдегі тіл	10	100Икемдеуге дейінгі аралас10 % сынаулы	1	9090 % қалғаны	9	10Барлығы	10	100Икемдеуден кейінгі аралас10 % сынаулы	6	3090 % қалғаны	9	10	Кейбір процедураларға ассемблер жасай алатындай аппараттық қамтамасыз етуге толық қатынау қажет
Бұл категорияларға операциялық жүйедегі үзіліс өңдеушілері мен үзілістер, сол секілді реттелген жүйелердегі құрылғылардың тексерушілері келіп түседі.	Ассемблер тілінде оператор құрылымы машиналық командаға сәйкес құрылымды білдіреді
Әр түрлі машиналар мен әр түрлі деңгейлердегі ассемблер тілі бір-бірімен ұқсас
Intel компьютерлеріндегі Microsoft MASM, SPARC процестеріне Sun ассемблерге мысал бола алады
	Ассемблер тілінің жеткізілуі төртке бөлінеді
Олар: белгі, операция, операнд және комментарий алаңдарынан тұрады
Белгілер жады адресіне арналған символикалық аттармен қамтамасыз ету үін қолданылады
Олар командаларға өту және деректі сөздердің сақтайтын жерге символдың аттары бойынша қатынау мүмкіндігін алу қажет
	Егер жекізу машиналық командаың символикалық репрезентациясы, не бұл кодтың символикалық аббревиатурасы, не ассемблердің өзне арналғанкомандасы болып табылса, онда операция коды алаңында жатады
	Операндтардың алаңдары машиналық командалар үшін операндтар болып табылатын адрестер мен регистрлерді анықтайды
тұрақтылар, жады ұяшықтары және т
	Комментарий алаңында программа әрекетінің түсіндірмесі келтіріледі
Бұл комментарийлерсіз ассемблердегі программаларды түсіну өте қиын.4
Жоғары деңгейлі бағдарламалау тілдері.	4.1
Фортран.	IBM фирмасы жасап шығарған Фортран бағдарламалау тілі ең алғашқы және сәтті компилятор болып табылады
Букс пен американдық мамандардың бір тобы  бұл тілді алғаш  рет 1954 жылы жария етті
Толық түрінде FORmulae TRANslation – формулаларды түрлендіру
	Фортран тілінің көпке шейін сақталуының себебі Фортран тілінің өзінің және оған арналған трансляторлардың қарапайым құрылымы болып табылады
Фортран тіліндегі бағдарлама белгілі бір стандарттар бойынша құрастырылады, операторлар тізбегі қатаң ретпен жазылады
Фортран тілінде жазылған бағдарлама бір немесе бірнеше сегменттердің жиынтығы болып табылады
Бүтін бағдарламаның жұмысын басқаратын сегмент негізгі бағдарлама деп аталады
	Фортран тілі ғылыми және инженерлік-техникалық салаларда қолдану үшін ойлап табылған
Алайда бұл тілде тармақталған логикалық есептер, экономикалық есептер және де әсіресе безендіру есептері(кестелерді, сілтемелерді, ақпартізімдерді құрастыру және т
	1958 жылы Фортран тілінің модификациясы – Фортран ІІ пайда болды
Араға бірнеше жыл салғаннан кейін 1962 жылы Фортран ІҮ, қазіргі кезде жиі қолданылатын тілдердің бірі, пайда болды
1966 жылы Фортран тілінің екі жаңа стандарты шықты: Фортран және базисті Фортран (Basic FORTRAN)
Кобол.Кобол бағдарламалау тілі 60-жылдарда жасалған, ол экономикалық салада бизнес-есептерді шығаруда қолданылады
Оның ерекшедігі «көпсөзділігінде» болып табылады – оның операторлары кәдімгідей ағылшын фразаларына ұқсайды
Кобол тілінде сан алуан сыртқы тасымалдағыштарда сақталатын өте ауқымды ақпараттармен жұмыс жасау үшін қуатты құралдар жасалған
Бұл бағдарламалау тілінде қазіргі таңда көп қолданылатын қосымшалар жазылған
Алгол.Алгол – 1960 жылы шығарылған компиляторланатын тіл
Негізінен, алгол тілі фортран бағдарламалау тілінің орнына қолданылу үшін жасалынған болатын, алайда оның құрылымы өте ауқымды болғандықтан, бұл бағдарламалау тілі кең тараған жоқ
1968 жылы Алгол 68 версиясы пайда болды
Бұл версия өзінің мүмкіндері жағынан қазіргі кездегі көптеген бағдарламалау тілдерінен басым болып табылады, алайда сол заманда жетілдірілген компьютерлер болмауы салдарынан бұл тілге сәйкес тиімді компиляторлар жасап шығару мүмкін болған жоқ еді
Бейсик.Бейсик тілі 1964 жылы Англияда шығарылған
Бұл тіл, негізінен, бағдарламалауды оқыту тілі болып табылады
Толық түрінде Beginner’s All-purpose Symbolic Instruction Code (BASIC) – бастаушыларға арналған көп мақсатты символдық оқытушы код
Көп ұзамай бұл бағдарламалау тілінің үйренушілері және авторлары Бейсик тілінің Фортран тіліне ұқсас екенін аңғарады
Бұл тіл оңай қабылданғандықтан, Фортран тіліне қарағанда бұл тілдеағдарламалар жылдамырақ құрастырылатын
Сонымен қатар Бейсик тілі дербес компьютерлерде қолайлы болған
Осылайша Бейсик тілі әйгілі тілдердің біріне айналады
Си.Си бағдарламалау тілі Bell лабораториясында жасалған
Бұл тілді ассемблердің орнына қолдану үшін шығаруды жоспарлаған еді
Си – бұл жалпы тағайындаудың тілі, ол өзінің үнемділігімен, тиімділігімен және тасымалданғыштығымен ерекшеленеді
Аталған ерекшеліктер арқасында Си тілі арқылы бағдарлама өнімдерінің кез келген түрін жасауға болады
Си тілі құралдық тіл ретінде қолданғанда, жедел және тұтас бағдарламаларды құрастыруға болады
Ява.Бұл тіл 90-жылдарда Sun компаниясымен Си++ негізінде шығарылған болатын
Бұл тіл Си++ тілінің жетілдірілген түрі болып табылады
Ол Бейсиктен кейін дүние жүзі әйгілі тілдердің ішінде екінші орында.5
Паскаль тілінде бағдарламалау.Паскаль тілін 1979 жылдары Швейцарияда Никлоус Вирт ашқан
Паскаль тілі – IBM PC дербес компьютерлеріне арналған дәстүрлі алгоритмдік бағдарламалау тілі болып табылады
Бұл Паскаль тіліндегі бағдарлама қойылған мәселені шешуге әкелетін, арнайы ұйымдастырылған декректерді түрлендіру қадамдарының тізбегі екенін білдіреді
Кез келген басқа тілдер сияқты, Паскаль тілінің өзінің алфавиі, символдар жиыны, өзінің грамматикасы, операторларды жазу және бағдарламаларды безендіру ережелері болады
	Орыс әріптері мен пернетақтаның кейбір басқа символдары Паскаль алфавитіне кірмейді, бірақ оларды жалқы тырнақшаларда және түсініктемелерде пайдалануға болады
Паскаль тілінің алфавиті.Символ	Атауы	Символ	АтауыA-Z	Бас әріптер	:	Қос нүктеa-z	Кіші әріптер	+	Плюс таңбасы0-9	Цифрлар	-	Минус таңбасы	Бос орын	*	Asterisk жұлдызы!	Леп белгісі	/	Қиғаш сызық (слеш)#	Диез	^	Кірістіру белгісі%	Процент белгісі	=	Теңдік белгісі&	Амперсант белгісі	<	Кіші белгісі$	Доллар таңбасы	>	Үлкен белгісіСимвол	Атауы	Символ	Атауы“	Қос тырнақшалар	( )	Сол жақ және оң жақ дөңгелек жақшалар‘	Апостроф (жалқы тырнақша)	[ ]	Сол жақ және оң жақ квадрат жақшалар.	Нүкте	{ }	Сол жақ және оң жақ фигуралық жақшалар,	Үтір	_	Астын сызу белгісі;	Нүктелі үтір	@	Коммерциялық «эт»Паскаль тілінде жазылған бағдарламаның құрылымдық бөлімі.Паскаль тіліндегі бағдарлама құрылымының жалпы түрі мұндай болады:                 program ;      label – белгілеу;      const – тұрақтылар;      type – түрлер;	      var – айнымалылар;      procedure, function – процедуралар мен функциялар;begin  1-оператор;  2-оператор;	  3-оператор;...end.......