Мазмұны  Кіріспе...............................................................................................................31.1Есептің қойылымы…………………………………….........................
5  (мақсаты, шарты, программа қандай болу керек)   1.2 Кіру құжатты (формасы, атауы)……………….........................……....6   1.3 Шығу құжаты (кесте формасы)………………………………………12   1.4 Программалық жабдықтау (фильтрация,т.б)……………..…............14        2
Терминологиялық сөздер........................................................................18        3
Листинг.....................................................................................................19Қорытынды...................................................................................................24Әдебиеттер тізімі...........................................................................................25 1
2 Кiру құжатыКiру құжаты – бұл ақпаратты жүйелер функциясының орындалуына қажет, клавиатурадан терiлген, құжат, мәлiмет, сигнал түрiнде берiлетiн ақпарат.Мәліметтер базасын құру техникасы Қарапайым ақпараттық жүйенi құруда Delphi-дiң МБ-мен жұмыс iстеуiн қарастырайық
Бұл АЖ-нi код жазбай-ақ атқаруға болады
Барлық керектi операциялар Database Desktop, форманың конструкторы, объектiлер инспекторы көмегiмен жүзеге асады
АЖ-де жүмыс iстеу келесi басты кезеңдерден тұрады:•	МБ-ын құру;•	жоба құру;Мәліметтер базасымен(МБ) мен жобадан басқа АЖ-ге есептеу жүйесi мен мәліметтер базасын басқару жүйесі (МББЖ) кiредi
Компьютер немесе компьютерлiк желi бар делiк, және олардың характеристикалары болашақ АЖ-нiң қажеттiлiктерiн өтейдi делiк
Қарапайым кезде МБ бiр кестеден тұрады
Егер кестелер бар болса, онда бiрiншi кезең орындалмайды
Айта кететiн жайт, Delphi-мен қоса жобаның көптеген мысалдары, сонымен қатар МБ-ның жобасы да берiледi
Осы жобаға арналған кестелердiң файлдары С:/Program Files/CommonFiles/BorlandShared/Data каталогында орналасқан.Мәліметтердің ұйымдастыру - түріне байланысты мәліметтер базасындағы деректердің негізгі модульдері келесі түрде болады:- иерархиялық- желілік- реляциялық- объекті–бағытталғанИерархиялық модельде деректер ағаштәріздес (иерархиялық) құрылым түріне беріледі
Деректердің осындай ұйымы иерархиялық реттелген ақпараттармен жұмыс жасағанда ыңғайлы, бірақ қиын логикалық байланыстармен жұмыс жасағанда иерархиялық модель әлсіз.Желілік модельде деректер ерікті граф түрінде ұйымдастырылады
Желілік модельдің кемшілігі болып, құрылымының қаттылығы және оны ұйымдастырудың қиындылығы болып табылады
Сонымен қатар, иерархиялық және желілік модельдерінің кемшіліктерінің бірі болып, деректер құрылымының деректер базасын жобалау кезінде берілуі және деректерге қатынау барысында өзгертуге келмейді.Объекті–бағытталған модельде мәліметтер базасының жазбасы объект түріне беріледі
Объекті–бағытталған модель желілік және реляциялық модель ерекшеліктерін қамтып, күрделі мәліметтер базасын құруда пайдаланылады
Мәліметтер базасының кестесін құруДеректер базасын құрайтын кестелер қатты дискідегі каталогта тұрады
Кестелер файлдарда сақталып, бөлек құжаттарға немесе электрондық кестелерге ұқсас
Кестелерді көшіруге, орнын ауыстыруға болады
Бірақ, құжаттарға қарағанда, деректер базасының кестелері көпқолданбалы қатынау режимін қолдайды, яғни бірнеше қолданбалармен бірмезгілде қолданылуына болады
Бір кесте үшін (деректер, кілттер, индекстер т.б
құрайтын) бірнеше файлдар жасалады
Осылардың ішінде негізгісі болып кестенің атымен аталатын деректер файлы болып есептеледі
Кестені таңдағанда, әсіресе оның негізгі файлы таңдалады
Мысалы: dBase кестесі үшін кеңейтіндісі DBF болатын файл, ал Paradox кестесі үшін DB кеңейтіндісі болып табылады
Деректер базасының әрбір кестесі жолдан және бағаннан тұрады, бір типті объектілердің ақпараттық жүйелер деректерін сақтауға негізделген.Өріс мүмкін болатын типтің деректерін қамтиды
Кестенің негізін оның өрісінің сипаты құрайды
Әрбір кестенің кем дегенде бір өрісі болуы тиіс
Кестенің құрылымдық түсінігі өте кең және оның құрамына:- өріс сипаты- кілт- индекс- өрістің мәтініне шек қою- кестелер арсындағы біртұтастықты сақтау- парольдеркіреді
Кестені құрғанда кестенің аты және құрылымы беріледі
Кестенің атын өзгерткенде кесте және оның файлдары жаңа атқа ие болады
Бұл үшін деректер базасының кестелерімен жұмыс істейтін арнайы программалар қолданылады
Дискіден кестені жойғанда, оның барлық файлдары да жойылады.Ал енді мәліметтер базасымен жұмыс жасамас бұрын, біз оның каталогын құрып алайық
Деректер базасын құру DataBase Desktop (DBD) утилит көмегімен іске асырылады
DBD утилит көмегімен кестені құруға және оның құрылымын өзгертуге, оның біріншілік кілттерін және индекстерін, жазбалар құру және өзгертулер жасауға болады.Жаңа кестені құру келесі команда бойынша іске асады: Пуск\Программы\Borland Delphi7\Database Desktop
DBD кірген мезетте жұмыс істейтін каталогты таңдап алу керек
Ол үшін DBD менюінде File\Working Directory және көрсетілген терезеден D:\POS каталогына сілтеме жасаймыз
Менің жағдайымда  кестені құру үшін File\New\Table
DBD Creat Table терезесін шығарады, оның форматын таңдап алу керек.Құрылып жатқан кестенің әрбір өрісіне бір жазба сәйкес келеді
Field Name бағанына өріс атын, Type – символ, өрісте сақталынатын мәліметтердің типін анықтайды
Size бағанына – сан қойылады, өрістің ұзындығын анықтайды, Key-«*» символы, егер бұл өріс бойынша біріншілік кілт қою керек болса.Кестенің қасиетін беруValidity Checks – бұл қасиет кестенің мәндерінің дұрыстығын тексереді
Table Lookup – бұл бөлім берлген кестенің өрісін басқа көрсетіліп отырған кестенің өрісімен байланысын көрсетеді
Table Lookup – ті таңдағанннан кейін Define – аңықтау батырмасы шығады
Бұл терезеде драйверлер мен псевдонимдерді қолдана аламыз.Secondary Index – бұл бөлім ары қарай жұмыс барысына керекті екінші индекс құруға мүмкіндік береді.Жаңа индекс құру үшін Define – анықтау батырмасын басу керек
Бұл батырманы басқанда көру диалогтық терезесі ашылады
Оның сол жақ терезесінде Fields қатынау өрістерінің тізімі көрсетілген, ал оң жақ терезесінде Indexed Fields екінші индекс болатын өрістер көрсетіледі.Индексі таңдалғаннан кейін, оның индексін беретін терезе ашылады.Referential Integrity – бұл бөлім әртүрлі кестелердің арасында бүтін сілтеме байланыстарды қамтамасыз ету үшін қолданылады
Егер екі кестенің арасында сілтеме байланыс көрсетілсе, оның біреу – бас, ал басқасы – қосымша кестелер, онда қосымша кестеде бас кестеден алатын мәнің өрісі көрсетіледі
Сонымен қатар, бас кестедегі кілттік өрістің өзгерістеріне қосымша кестенің өзгеруін қамтамасыз ететін операция көрсетуге болады
Бұндай бүтін сілтеме деңгейі барлық кестелерге тән емес, бірақ Paradox 7 – де барлығы қарастырылған.Update Rule – радиобатырмалар тобы егер бас кестеде кілттік өрісті өшіргенде қосымша кестеде болатын өзгерістерді анықтайды
Егер Prohibit – ті таңдасақ, онда Database Desktop бұндай операцияны болдыртпайды
Егерде Cascade опциясы тұрса, онда кілттік өрісі бар бас кестеде өзгеріс болса, онда қосымша кестеде де өзгеріс болады
Ал егер сіз бас кестеден кілт өрісі бар жазбаны өшірсеңіз, онда қосымша кестеде сол кілттік өрісі бар жазба автоматты түрде өшеді.Strict Referential индекстерін орнатқанда Paradox –тың алғашқы версияларына (соның ішінде Paradox for DOS) кестелердің ашылуын және бұзылуына жолбермейді.Барлықоперациялар біткеннен кейін құрылған сілтеме атын бері керек.Table Language – бұл бөлім BDE Administrator арқылы кестенің тілін көсетуге (егер көрсетілмесе) немесе анықтауға (Modify батырмасы) мүмкіндік береді.Dependent Tables – бұл бөлім Referential Integrity сілтемелі деңгейіндегі кестелерді көруге мүмкіндік береді.Барлық керекті құрылымдық мәліметтер кестеге еңгізілгеннен кейін Save As батырмасын басу керек, сол кезде Windows – тағы стандартты сақтау терезе шығады
Кәдімгі терезеден айырмашылығы Alias тізімнің болуында
Бұл тізімде әр түрлі мәліметтер базасының псевдонимдері бар
Сіз тізімнен керекті псевдонимді таңдап, кестені сақтайсыз.dBase және Paradox форматының кестелеріDelphi–дің өзіндік кестелік форматы жоқ, бірақ ол dBase және Paradox кестелерімен жұмыс істей береді
Осы кестелердің әрқайсысының өзіндік ерекшеліктері бар.dBase кестесі персоналды компьютерлерге арналған бірінші форматтық кестелердің біріне жатады
dBase кестесінің негізгі қасиеті болып, оның қолданылуының қарапайымдылығы және көп қолданбалармен бірігіп жұмыс істеуі болып табылады.1.1
Кестесінде dBase кестесінің өрістік тип тізімі құралған
Мұнда әрбір типке символ беріледі.Тип	Белгіленуi	Мәннің мазмұныCharacter	C	Символдық қатар
Ұзындығы 256 символдан аспайды.Float	F	Жүзбелі нүкте саны
Дәлдігі мантис саның 15 саны.Number	N	BCD форматындағы екілік–ондық жүйесінің саны.Date	D	Күн.Logical	L	Логикалық мән.Memo	M	Символдық мән
Ұзындығы шектелмеген.Ole	O	Форматтағы деректер
Деректер DBT кеңейтіндідегі файлда сақталады.Binare	B	Байттар тізбегі
Ұзындығы шектелмеген.				Кесте 1.1
dBase кестесінің өріс типі.dBase кестесі жеткілікті қарапайым және дискіде едәуір аз физикалық файлдарды сақтауда қолданылады
Файлдың кеңейтіндісіне қарап, оның құрамында қандай деректер бар екенін көруге болады.	DBF – кестелік деректер.	DBT – үлкен екілі объекті деректер, немесе BLOB – деректер (Binary Large Object)	MDX – колданба индекстер	NDX – dBase форматтык кестесін колдамайтын индекс
Осындай кестемен жұмыс істегенде программист бұны өзі өңдеу керек.dBase кестесінде өріс аты әріптер мен сандардан құралу керек және ол әріптен басталуы керек
Аттың максимал ұзындығы 10 символдан тұрады
Атты жазғанда арнайы символ және пробел жазуға болмайды.dBase кестесінің кемшілігі болып, оның  парольдік қорғаныстың болмауы және байланыстын бақылаудың болмауы
Сондықтан программист өзі осы істерді кодтау керек.Paradox кестесі деректер базасын құруға және онымен жұмыс істегенде ыңғайлы болып табылады.Оның негізгі артықшылықтарын атап өтейік:- деректердің тұтастығын- әртүрлі типті деректерді ұсынуға арналған өрістік типті- енгізілген деректерді тексеруді- кестенің парольдық қорғанысын қамтамасыз етеді.BDE Administrator DELPHI қолданбасы деректер базасына қатынауды BDE (Borland DataBase Engine – Borland фирмасының деректер базасының процессоры) арқылы жүзеге асырады
BDE өзінен деректерге қатынайтын динамикалық кітапханалар және драйвер жиынтығын құрайды
BDE деректер базасымен жұмыс істейтін барлық компьютерлерге орнатылуы тиіс
Деректер базасына BDE арқылы жіберілген сұраныс, қолданушы сұрақтар деректерді алады
Деректер базасымен жұмыс, ережеге сай, бірқолданушылық режимде жұмыс істейді
STANDART драйверлер үшін, әдетте Paradox деректер базасы, мінездемелер псевдонимі жиынтығы минималды болады: Type – драйвер және аты және PATH – деректер базасына жол
PATH параметрін басқанда, сіз көп нүктелі батырманы көресіз
Оны басқанда Windows–тің жаңа каталогты таңдау стандартты диалогы ашылады, ол арқылы біз керекті каталогты таңдап аламыз.STANDART типті драйверлерді тек Paradox, dBase, FoxPro кестелері үшін қолдануға болады.Жергілікті деректер базасына қатынау үшін BDE деректер базасының процессоры стандартты драйверлерді қолданады
Олар dBase, Paradox, FoxPro және текстік файлдарымен жұмыс жасайды
Жергілікті деректер базасын қолданғанда, желіде деректер базасына көпқолданушылық қатынауды ұйымдастыруға болады
Бұл жағдайда деректер базасының файлдары және осымен жұмыс істейтін қолданбалар желінің серверінде орналасады
Сонда әрбір қолданушы өз компьютерінде қолданбаның көшірмесі іске асады
3 Шығу құжатыКейбір кезде пайдаланушыға қазіргі уақыттағы мәліметтер қоры жайлы отчет керек болады
Ол үшін жаңа форма ашып  Table – дің  компонентің орналастырып, мәліметтер қорының кестелерімен байланыстырамыз (біздің жағдайда ол darik)
Оның Active қасиетіне True мәнін қоямыз
Бұл жерде Table1 darik кестесімен байланыстырылып, мәліметтердің негізігі жинағы болады
Енді осы формаға Rave бетінен RvDataSetConnection – ң  компонентін орналастырамыз
RvDataSetConnection1 – ді DataSet қасиетінде Table1 – мен байланыстырамыз.Енді формаға RvProgect компонентін орналастырамыз
Осымен кішкене тоқталып, біздің жобаға отчет формасын құруға көшеміз
Ол үшін Delphi – гі  Tools|Rave Designer бұйрығын орындаймыз
Бұл жерде Rave терезесі ашылады, бірінші істейтініміз ол мәліметтер көзін көрсететін зерзат енгізу
Ол үшін File|New Data Object бұйрығын орындаймыз
Ашылған терезеде Direct data View – ді таңдап алып Next батырмасын басамыз
Келесі терезеде біздің жобаның активті қосылымдарының тізімі орналасады: RvDataConnection1.Оны таңдап алып, Finish батырмасын басу керек
Сонда DataViewDictionary – үстінде DataView1 пайда болады
Отчетті құрғанда Region1, Band, DataBand, Text, dataText  компоненттерін пайдалану керек
Жұмыстың соңында болашақ отчеттің кейпі мынандай болуы тиіс:Отчет формасы аяқталды, енді оны Delphi ортасына қайтып келіп аяқтаймыз
RvProject -  тің ProjectFile қасиетінде құрастырған жобаның құжатын көрсету керек
Формаға Button кнопкасын орналастырып, оның басылым операторына                                           RvProject1.Execute;программасын жазамыз.Сонда біздің аяқталған отчетіміз мынандай бола                        1
4 Программалық жабдықтауПрограммалық жабдықтау деп, ТЖЖ–ны жұмыс істетуде жабдықтайтын АЖ–ның қызметін жүзеге асыратын программалардың бірігуін үғуға болады
Ол математикалық жабдықтау негізінде құрастырылып және оның нақты  «жұмыс істейтін» пішіні болады
Программалық жабдықтау екі бөлімнен тұрады: жалпы программалық жабдықтау, арнаулы программалық жабдықтау.Жалпы программалық жабдықтау – бұл жабдықтаудың кең көлемдегі қолданушыларға есептелген және ақпаратты өңдеу есебінде жиі кездесетін, есептеу кезеңінің «және–немесе» шешімін ұйымдастыруға арналған программалардың бірігуін бейнелейтін АЖ–ны программалық жабдықтаудың бөлімі.Амалдық (операциялық) жүйе – ол есептеу кезеңін тиімді  ұйымдастырып және есептеу жүйесінің қорларын (жедел жадыны, процессорды, арналарды және т.б.) тиімді тиеуді орындайды
Бұл жүйеге амалдық жүйелер мен жеке программалардың (драйверлердің) мүмкіндігін кеңейтетін программалар жатады.Есептеу кезеңін ұйымдастырудың тиімділігі АЖ–ның тәсілін, оның генерациясының параметрлерін және оған тиімді қолданбалы программалар пакетін (ҚПП) қосуды ұйлесімді таңдаумен жүзеге асырады
Әдетте программалық өнімді тұрғызу жабдығы жабдығы бар болып отырған амалдық жүйеде қамтылмаған көптеген осы заманғы программалау жабдықтары да бар
Бұл өнімдер АЖ–дағы программалық жабдықтауда өте қажет.Сынаққа арналған программалар (тесттер) ДЭЕМ–нің жұмыс қабілетін тексеріп, егер жөндеу қажет болса, оны анықтап, машинаның немесе жүйе жұмысының ақауына ат қойып (диагноз), оны шектеп тоқтатады.Арнаулы программалық жабдықтауға ҚПП мен бөлек функцияларды орындайтын және АЖ–ның әр түрлә функционалды ішкі жүйесінің нақты есептерін шешетін программалар кіреді
ҚПП – жалпы жүйелік және функционалдық болып екі топқа бөлінеді
Мұндағы жалпы жүйелік ҚПП кез–келген АЖ–да қолданылуы мүмкін.Мәліметтерді фильтрлеуTable компоненті мәліметтерді бейнелеп, реттеп, түзетіп қана қоймай, оған қоса белгілі бір шарттарға сәйкес фильтрлеуге мүмкіндік береді
Фильтрация – Table компонентінің Filter, Filtred, Filter options қажеттері арқылы беріледі.	Filtred – фильтрацияны қосып, ажыратады (true, false).	Filter – өріс мәнін шектейтін жолдық түрде шартты көрсетеді.Мысалы: Біздің программада фильтрацияны жасау үшін радиобатырмалар тобы RadioGroup, батырманы қолдандық
Оның құру программасы:procedure TForm1.BitBtn5Click(Sender: TObject);begincase RadioGroup2.ItemIndex of 0: Table1.Filter:='(Fam='''+Edit1.Text+'*'+''')'; 1:Table1.Filter:='(Name='''+Edit1.Text+'*'+''')'; 2:Table1.Filter:='(Nomer='''+Edit1.Text+'*'+''')'; 3:Table1.Filter:=''; end;......