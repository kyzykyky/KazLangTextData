Жолдық процедуралар мен фукнциялар	2.3
Жолдық қатарларға программа құру	2.4
Жолдық қатарлар мен амалдар орындау        Қорытынды 	Пайдаланылған әдебиеттерКіріспеTurbo Pascal – жоғарғы деңгейлі программалау жүйесі
Оның тұңғыш нұсқасын 1970 жылы швейцрия физигі Niklaus Wirth  ұсынған.Автор тілді алғашқы арифметикалық есептеу машинасын жасаған француздың ұлы ғалымы Блез Паскальдің құрметіне Паскаль деп  атап , тіл атауын үнемі  бас әріппен жазылуын сұраған.Кейінен тілдің көптеген нұсқалары жарық көреді.Turbo Pascal – Оның тұңғыш нұсқасын жоғарғы деңгейлі программалау жүйесі 
1970 жылы швейцрия физигі Niklaus Wirth ұсынған 
тілді алғашқы арифметикалық есептеу машинасын жасаған француздың ұлы ғалымы Блез Паскальдің құрметіне автор деп паскаліия ғалымы Никлаус Вирт жасаған Паскаль программалау тілінен тарайды
Хейлсбергтің еңбегінің нәтижесінде  Turbo Pascal қазіргі заман талабына сай, қуатты программалау жүйесіне айналды
Turbo Pascal – жоғарғы деңгейлі программалау жүйесі
Оның логикалық құрылымы әр түрлі есептерді дәл шешуге көмегін тигізеді
  Бейсик тілі сияқты, Паскаль оқып-үйренуге жеңіл, түрлі салалық информациямен жұмыс істеуде нәтижелі болғандықтан, дүние жүзінде көп тараған тілдердің бірі
Оның ыңғайлылығы:•	тілге дамытылған берілгендер типтері енгізілген
Олар өңделетін берілгендер элементтерін толық сәйкестендіріп сипаттауға және жаңа берілгендер типтерін енгізуге мүмкіндік береді;•	мұнда кішігірім жеңіл программалармен бірге күрделі құрылымды программаларды құру да мүмкін;•	тіл синтаксисі қиын емес; нұсқаулардың (операторлардың) саны мүмкіндігінше азайтылған, т.б.Turbo Pascal жүйесінде қарапайым есептерді шешудің программасынан бастап, күрделі мәліметтер қорын құрудың сан қырлы жұмыстары жүргізіледі
Жолдық қатарлар.Программаларда кездесетін әр түрлі символдардан тұратын тізбектерді жолдық қатарлар деп атайды
Өрнектерде жолдық қатарлар апострофқа алынып жазылады.Turbo Pascal-да жолдық қатарларға компьютердің жадынан 0 байттан 255 байтқа дейін орын беріледі (жолдық қатар ұзындығына – 255 символ, ұзындықтың мәніне – 1 символ).Жолдық қатарлардан тұратын идентификаторлар String типі арқылы сипатталады
Идентификатордың типінен кейін тік жақшаның ішінде осы идентификатордың ұзындығының мәні неше символдан тұруы мүмкін екені көрсетіліп кетеді
Егер бұл мән көрсетілмесе, онда жолдық қатар ұзындығына компьютердің жадынан 255 символға дейін орын беріледі.Жолдық қатарлы идентификаторды типтер бөлімінде (TYPE) немесе бірден айнымалылар бөлімінде (VAR) сипаттауға болады
Сонымен қатар программалауда жолдық қатарлар тұрақты шамалар ретінде де қолданылады (таңдау селекторытұрақтысынан басқа).Жолдық қатарлардың сипатталу мысалдары:PROGRAM Katarlar;CONST  S=’Қайсар’;       {S тұрақтысы  Қайсар тіркесіне тең }TYPE Gumn=String [10];VAR X: String [17];       {Х айнымалысының ұзындығы 17 символға дейін}A: String [6]; {Aайнымалысының ұзындығы 6 символға дейін}B: String;        {В айнымалысының ұзындығы 255 символға дейін}C: Gumn;        {C айнымалысының ұзындығы 10 символға дейін} Жолдық өрнектермен амалдар
          Операндалары жолдық қатар болып табылатын өрнектерді жолдық өрнектер деп атайды
Идентификаторларға жолдық айнымалылардың мәнін беру үшін меншіктеу операторы қолданылады
Егер меншіктеу операторы орындалғанда, символдар саны сипаттамалар бөлімінде көрсетілген шамадан асып кетсе, онда идентификатор қатардың сол жағынан бастап көрсетілген шамаға тең болатын символдарды ғана меншіктейді, ал оң жақтағы артық символдар алынып қалады.…VAR X: String [4]Begin X:=’Gymnazy’ {Х-ке ‘Gymn’ тіркесі ғана меншіктеледі}Writeln (X);…Жолдық қатарлармен біріктіру және  салыстыру амалдарын орындауға болады
Біріктіру амалы бірнеше жолдық қатарды біріктіріп  шығару үшін қолданылады
Біріктірілетін жолдық қатардың ұзындығы  255-тен аспауы тиіс.Мысалы:…..A:=’Менің’; B:=’Қазақстанымның’;Writeln (A+’  ‘+B)   {Менің Қазақстанымның – тіркесі шығады}Х:=’Тәуелсіздігіне’;Y:=’10 жыл’;Z:=X+’  ‘+Y;         {Z Тәуелсіздігіне 10 жыл- тіркесін меншіктейді}Writeln (Z);                     {де, осы тіркесті экранға шығарады}Жолдық қатарларды салыстыру амалы екі жолдық қатарды салыстыру үшін қолданылады
Қатарларды салыстыру солдан  оңға қарай ең бірінші кездесетін бірдей емес символға дейін жүргізіледі
Егер қай жолдың қатардың бірдей емес символының информация алмастыру стандартты таблицасындағы нөмірі үлкен болса, сол жолдық қатар үлкен деп есептеледі
Егер жолдық қатарлардың ұзындығы мен барлық символдары сәйкес келсе, олар тең деп есептеледі
АЛ егер жолдық қатардың ұзындықтары әр түрлі болып, ал символдары сәйкес болып келсе, онда үлкені болып ұзындығы  үлкен жолдық қатар  есептеледі
Жолдық қатарлардың салыстыру амалдарының нәтижесі әрқашан бульдік тип болады
               ‘intel’>’INTEL’                           {нәтижесі True}                ‘Pentium’< ‘PENTIUM’             {нәтижесі False}                ‘Duron’ = ‘Duron’                       {нәтижесі True}                ‘Celeron’‘Celeron’                  {нәтижесі False}                ‘Hewlett’ = ‘Laserjet’                   {нәтижесі False} Жолдық процедуралар мен функциялар.Жолдық қатардың ұзындығын есептеу үшін LENGTH функциясы қолданылады, нәтиженің типі 0-ден 255-ке дейінгі бүтін сан (Byte) болып табылады:X:=LENGTH (А);             //Х иденфикаторы А жолдық қатарының                                                 ұзындығын меншіктейді.Writeln (LENGTH (А));  // экранға А жолдық қатарының                                                ұзындығы шығады
      Төмендегі программада Х жолдың қатарының ұзындығы есептеліп табылып, ол бүтін сан болатын А идентификаторына меншіктелген:PROGRAM Kat1;VAR X:String; A:lnteger;BEGIN X:= ‘Pentium-lll’A:=Length (Х);Writeln (‘A=’ ‘А); Readln END.Жолдық қатардан фрагмент көшіріп алу үшін COPY функциясы қолданылады:  COPY (A,N,M);             //А жолдық қатарының N позициясындағы символдан бастап М символ көшіріп алады.Х:=COPY (‘Облыстық гимназия’, 10,4);   //Х иденфикаторы “гимн” фрагментін меншіктейді.Writeln (COPY (‘Облыстық гимназия’, 10,8);   //экранға гимназия сөзі шығады
  Төмендегі программада Х қатарынан Pentium сөзі көшіріліп, А идентификаторымен белгіленген жолдық қатарға меншіктеледі:PROGRAM Kat2;VAR X,А:String;BEGIN X:= ‘Pentium-lll’; A:=Copy (Х,1,7);Writeln (‘A=’ ‘А); Readln END.Жолдық қатарлар фрагменттерін біріктіру үшін CONCAT функциясы қолданылады:CONCAT(Х,А);    //функция Х және А қатарларын біріктіреді.Writeln (Concat (‘Гимн ‘,’ Азия’, ));     //экранға Гимн Азия сөзі                                                                                                  шығады             Y:=Concat  (‘Гимн’,’Азия’))         //Y Гимн Азия  сөзін меншіктейді
                                                                          Төмендегі программада жолдық қатар болып табылатын Y тұрақтысы X қатарымен біріктіріліп, нәтиже А идентификаторымен белгіленген жолдық қатарға меншіктеледі:PROGRAM Kat3;CONST Y=’Input’ ; VAR X,A: String;BEGIN  X:=’Output’; A:=Concat (Y,X);Writeln (‘A=’,A) ; Readln END
          Жолдық  қатардың ішіндегі тұрған бір фрагменттің орнын анықтау үшін  РОS функциясы қолданылады.Бұл функция мәнінің типі бүтін және ол жолдық  қатарда берілген фрагменттің басталатын позиция нөміріне тең болады
Ал егер жолда  ондай фрагмент кездеспесе онда нәтиже 0-ге тең болады, мысалдар:POS (X,A);        // Х фрагментінің А қатарындағы басталатын нөмірі.POS (‘наз’,’ Гимназия’);    // нәтиже 4-ке тең болады.POS  (‘зал’,’Гимназия’);    //  нәтиже 0-ге тең болады
                Төмендегі программада Х фрагменті Y қатарындағы басталатын орны бүтін сан болатын А идентификаторына меншіктелген.PROGRAM Kat4;CONST Y=’Input’ ; VAR X: String;BEGIN  X:=’put’; A:=POS (X,Y) ;  Writeln (‘A=’,A) ; Readln END
                 Жолдық қатардан бір фрагмент өшіріп тастау үшін DELETE процедурасы қолданылады, жазылуы:...