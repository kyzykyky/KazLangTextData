МазмұныКІРІСПЕ               Мазмұны 2 Есептің алгоритмі 3 Теориялық бөлім              3.1 Мәліметтер базасын ұйымдастыру    3.3 Мәліметтер базасының кестесін құру    3.4 Кестенің қасиетін беру    3.5 Paradox форматының кестелері    3.6 Компоненттер парағы 4 Программаның баяндалуы    4.1 Жалпы мағлұматтар    4.2 Функционалдық тағайындалуы    4.3 Логикалық құрылымның баяндалуы    4.4 Шақыру және жүктеу    4.5 Қажетті техникалық жабдықтар    4.6 Кіріс мәліметтер   4.7 Шығыс мәліметтер 	5 Бақылау мысалдарын баяндау              5.1
Архитектуралық сәулет құрылыстар	   5.2
сәулетті құрылыс - өркениет өзегі	Қорытынды           Қосымша	Қолданылған әдебиеттер          Листинг2 Есептің алгоритмі1.BDE Administrator – ды ашып, біздің мәліметтер базасына керекті драйверді таңдаймыз (STANDART)
Диалогтық терезенің оң жағында PATH параметріне құрылған каталогтың жолын көрсетеміз
2.Деректер базасын құру үшін ең алдымен Database Desktop арқылы бізге керекті кестелерді құрамыз
Сонымен қатар, бас кестенің қосымша кестелермен байланыстыру үшін бас кестеде екінші индекстерді тағайындау керек
Бас кестені қосымша кестелермен байланыстыру керек
Барлық құрылған кестелерді BDE Administrator – да көрсетілген каталогқа сақтау керек.3.Содан кейін Delphi – ге кіріп, кестелер және менюі бар жаңа форманы жасаймыз, сақтаймыз.4.Delphi – де кестелерді байланыстыру үшін DataModule – ді құрамыз, сақтаймыз.5.Әр бір кестеге формаларды жасаймыз, проектте сақтаймыз.6.Кестені және SQL тілін пайдаланып, құжаттар мен есеп беруді құрастырамыз.7.Жаңа формаларға инструкцины және автор туралы мәліметтерді енгіземіз.8.Барлық жасалған формаларды проектің ішіне сақтаймыз
                                                                                             3 Теориялық бөлім3.1 Мәліметтер базасын ұйымдастыруМәліметтер базасы кейбір қолданбалы ақпараттық жүйеде қолданылатын деректерді қамтиды
Мысалы: ’Сирена’ немесе ’Экспресс’ авиа және  теміржол билеттерін сату системасы
Мәліметтердің  ұйымдастыру  түріне байланысты мәліметтер базасындағы деректердің негізгі модульдері келесі түрде болады:•	иерархиялық•	желілік•	реляциялық•	объекті-бағытталғанИерархиялық модельде деректер ағаштәріздес (иерархиялық) құрылым түрінде беріледі
Деректердің осындай ұйымы иерархиялық реттелген ақпараттармен жұмыс жасағанда ыңғайлы, бірақ қиын логикалық  байланыстармен жұмыс жасағанда иерархиялық модель әлсіз .Желілік модельде деректер ерікті граф түрінде ұйымдастырылады
Желілік модельдің кемшілігі болып, құрылымының қаттылығы және оны ұйымдастырудың қиындылығы болып табылады
Сонымен қатар, иерархиялық және  желілік модельдерінің кемшіліктерінің бірі болып, деректер құрылымының  деректер базасын  жобалау кезінде берілуі және деректерге қатынау барысында өзгертуге келмейді.	Объекті-бағытталған модельде мәліметтер базасының жазбасы объект түрінде беріледі
Объекті-бағытталған модель желілік және реляциялық модель ерекшеліктерін қамтып, күрделі мәліметтер базасын  құруда пайдаланылады
                              3.2  BDE Administrator	 DELPHI қолданбасы деректер базасына қатынауды BDE ( Borland DataBase Engine- Borland фирмасының деректер базасының поцессоры ) арқылы жүзеге асырады
BDE өзінен деректерге қатынайтын динамикалық кітапханалар және драйвер жиынтығын құрайды
BDE деректер базасымен жұмыс істейтін барлық компьютерлерге орнатылуы тиіс
Деректер базасына BDE арқылы жіберілген сұраныс, қолданушы сұратқан деректерді алады.	Жергілікті деректер базасы және онымен жұмыс істейтін қолданба бір компьютерде орналасады
Бұл жағдайда ақпараттық жүйе жергілікті сәулетке ие
(Сурет 1.1)                                                                                   Сурет 1.1
Дербес сәулетДеректер базасымен жұмыс, ережеге сай, бірқолданушылық режимде жұмыс істейді
STANDART драйверлер үшін, әдетте Paradox деректер базасы, мінездемелер псевдонимі жиынтығы минималды болады: Type – драйвер аты және PATH – деректер базасына жол
PATH параметрін басқанда, сіз көп нүктелі батырманы көресіз
Оны басқанда Windows – тің жаңа каталогты таңдау стандартты диалогы ашылады, ол арқылы біз керекті каталогты таңдап аламыз.STANDART типті драйверлерді тек Paradox, dBASE, FoxPro кестелері үшін қолдануға болады
        Жергілікті деректер базасына қатынау үшін BDE  деректер базасының  процессоры стандартты драйверлерді қолданады
Олар dBase, Paradox, FoxPro және текстік файлдарымен жұмыс жасайды
Жергілікті деректер базасын қолданғанда, желіде деректер базасына көпқолданушылық қатынауды ұйымдастыруға болады
Бұл жағдайда деректер базасының файлдары және осымен жұмыс істейтін қолданбалар желінің серверінде орналасады
Сонда әрбір қолданушы өз компьютерінен серверде орналасқан қолданбаны қосқанда, өз компьютерінде қолданбаның көшірмесі іске                          3.3  Мәліметтер базасының кестесін құру           Деректер базасын құрайтын кестелер қатты дискідегі каталогта тұрады
 Кестелер    файлдарда   сақталып ,  бөлек    құжаттарға   немесе  электрондық кестелерге ұқсас
Кестелерді көшіруге, орнын ауыстыруға болады
Бірақ, құжаттарға қарағанда, деректер базасының кестелері көпқолданбалы қатынау режимін қолдайды, яғни бірнеше қолданбалармен бірмезгілде қолданылуына болады
Бір кесте үшін ( деректер, кілттер, индекстер т.б  құрайтын ) бірнеше файлдар жасалады
Осылардың ішінде негізгісі болып кестенің атымен аталатын деректер файлы болып есептеледі
Кестені таңдағанда, әсіресе оның негізгі файлы таңдалады
Мыс: dBase кестесі үшін кеңейтіндісі DBF болатын файл, ал  Paradox кестесі үшін DB кеңейтіндісі болып табылады
Деректер базасының әрбір кестесі жолдан және бағаннан тұрады, бір типті объектілердің ақпараттық жүйелер деректерін сақтауға негізделген
Өріс мүмкін болатын типтің деректерін қамтиды
Кестенің негізін  оның өрісінің сипаты құрайды
Әрбір кестенің кем дегенде бір өрісі болуы тиіс
Кестенің құрылымдық түсінігі өте кең және оның құрамына:•	өріс сипаты •	кілт•	индекс•	өрістің мәтініне шек қою•	кестелер арсындағы біртұтастықты сақтау•	парлольдеркіреді
Кестені құрғанда кестенің аты және құрылымы беріледі
Кестенің атын өзгерткенде  кесте және оның файлдары жаңа атқа ие болады
Бұл үшін  деректер базасының кестелерімен жұмыс істейтін арнайы программалар қолданылады
Дискіден кестені жойғанда, оның барлық файлдары да жойылады.	Ал енді мәліметтер базасымен жұмыс жасамас бұрын, біз оның каталогын құрып алайық
Деректер базасын құру DatabaseDesktop (DBD) утилит көмегімен іске асырылады
DBD утилит көмегімен  кестені құруға және оның құрылымын өзгертуге, оның біріншілік кілттерін және индекстерін, жазбалар құру және өзгертулер жасауға болады.Жаңа кестені құру келесі команда бойынша іске асады: Пуск\Программы\Borland Delphi7\Database Desktop
DBD кірген мезетте жұмыс істейтін каталогты таңдап алу керек
Ол үшін DBD менюінде File\Working Directory және көрсетілген терезеден D:\BOLATKHAN каталогына сілтеме жасаймыз
Менің жағдайымда Raspisanie кестесін құру үшін  File\New\Table
DBD Create Table терезесін шығарады, оның форматын таңдап алу керек
ОК-ді басып, біз осы форматты аламыз
Экранда келесідей сурет шығады:                                                Сурет1
Кестенің құрылымын құру суретіҚұрылып жатқан кестенің әрбір өрісіне бір жазба сәйкес келеді
 Field Name бағанына өріс атын, Type – символ, өрісте сақталынатын мәліметтердің типін анықтайды
 Size бағанына – сан қойылады, өрістің ұзындығын анықтайды,  Key–«*» символы, егер бұл өріс бойынша біріншілік кілт қою керек болса
                                        3.4 Кестенің қасиетін беруValidity Checks – бұл қасиет кестенің мәндерінің дұрыстығын тексереді
Бұл бөлімнің оң жақ терезесі 2 – кестеде көрсетілген және өрістік типіне қарай өзгеріп отыруы мүмкін:2 – кесте Validity Checks қасиеттері.Required Field 	Бұл индекаторда әрбір жазбада керекті жолдар белгілену керек.Minimum	Мәннің минимумы
Бұл қасиет сандық өріске берілу тиімді.Maximum	Мәннің максимумы
Бұл қасиет сандық өріске берілу тиімді.Default	Бұл қасиетті сандық және логикалық өрістерге, ал кейбір жағдайда символдыққа қолдану тиімді.Picture	Енгізілетін мәннің түрін корсетуге болады
Мысалы, телефон номерінің шаблоны (## - ## - ##).Assist	Бұл батырма Picture түрін құруға көмектесетін диалогтық терезені шақырады
Table Lookup – бұл бөлім берлген кестенің өрісін басқа көрсетіліп отырған кестенің өрісімен байланысын көрсетеді
Table Lookup – ті таңдағаннан кейін Define – анықтау батырмасы шығады
Бұл батырманы басқанда көру диалогтық терезесі ашылады
Бұл терезеде драйверлер мен псевдонимдерді қолдана аламыз
Secondary Index – бұл бөлім ары қарай жұмыс барысына керекті екінші индекс құруға мүмкіндік береді.Жаңа индекс құру үшін Define – анықтау батырмасын басу керек
Бұл батырманы басқанда көру диалогтық терезесі ашылады
Оның cол жақ терезесінде Fields қатынау өрістерінің тізімі көрсетілген, ал оң жақ терезесінде Indexed fields екінші индекс болатын өрістер көрсетіледі.Index Options радиобатырма панелі келесідей қасиеттерді құруға мүмкіндік береді:Unique	Бұл опция екінші индекс болатын өрісті болдырмайды, егер кестеде бір – біріне ұқсас өрістер болса
  Descending	Бұл опция кестені кему бойынша реттейді
 Case Sensitive	Бұл опция енгізілген символдардың регистріне назар аударады
Maintained	Егер бұл опция тұрса, онда кестеде өзгерістерден кейін индекс ауысып тұрады
Индексі таңдалғаннан кейін, оның индексін беретін терезе ашылады.Referential Integrity – бұл бөлім әртүрлі кестелердің арасында бүтін сілтеме байланыстарды қамтамасыз ету үшін қолданылады
Егер екі кестенің арасында сілтеме байланыс көрсетілсе, оның біреуі – бас, ал басқасы – қосымша кестелер, онда қосымша кестеде бас кестеден алатын мәннің өрісі көрсетіледі
Сонымен қатар, бас кестедегі кілттік өрістің өзгерістеріне қосымша кестенің өзгеруін қамтамасыз ететін операция көрсетуге болады
Бұндай  бүтін сілтеме деңгейі барлық кестелерге тән емес, бірақ Paradox 7 – де барлығы қарастырылған
Update rule – радиобатырмалар тобы егер бас кестеде кілттік өрісті өшіргенде қосымша кестеде болатын өзгерістерді анықтайды
Егер Prohibit – ті таңдасақ, онда Database Desktop бұндай операцияны болдыртпайды
Егерде Cascade опциясы тұрса, онда кілттік өрісі бар бас кестеде өзгеріс болса, онда қосымша кестеде де өзгеріс блады
Ал егер сіз бас кестеден кілт өрісі бар жазбаны өшірсеңіз, онда қосымша кестеде сол кілттік өрісі бар жазба автоматты түрде өшеді
Strict Referential индекаторын орнатқанда .......