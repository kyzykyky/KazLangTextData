Программалау процесін жақсартатын және кең қолданылатын әдістердің бірі – құрылымдық программалау.
Құрылымдық программалаудың 3 бөлігі (құраушысы) бар:1.Модульдік программалау2.Құрылымдық кодтау3.Жоғарыдан төменге қарай жобалауМодульдік программалау дегеніміз – программаны логикалық бөліктерге бөлу процесі.
Программа бірнеше модульдерге бөлінеді және мына 2 мақсат орындалуы тиіс:1)модулдің дұрыс болуы және оның контекстерден тәуелсіз болуы қажет;2)модулдің ішкі жұмыстарын білмей тұра әр түрлі модулдерден программа құру мүмкіндігінің болуы қажет.Мысал ретінде стандарт математикалық функциялардың есептелу программасын қарастыруға болады.
Программист sin(x) функциясын программаның кез-келген жерінде қолдана алады және оған функцияның есептелуіне қай әдістің қолданып тұрғанын білудің қажеттілігі жоқ.
Модуль өлшемі 60 жолдан аспауы керек және модульдер өзара тәуелсіз болуы керек.
Байланысқан элементтерді бір модульге, байланыспаған элементтерді әр түрлі модульге жинау керек.
Модульдерді қолдана отырып программа күрделілігін төмендетуге болады.Pascal тілінде модуль процедуралар мен функциялардың көмегімен құрылады, Cи тілінде функциялардың көмегімен құрылады.Құрылымдық кодтау деп программада басқарушы конструкциялардың–шартты операторлардың, циклдің (параметрлі, цикл-әзір, цикл-дейін) қолданылуын айтады.
Шартсыз көшу операторы программада сирек қолданылуы керек немесе шартты оператордың, циклдің көмегімен өзгертілуі керек.Программаны жоғарыдан төмен қарай жобалаудың өз иерархиялық құрылымы бар және қысқа есеп қойылымынан басталады.
Одан кейін есеп бірнеше ұсақ ішкі есептерге бөлінеді.
Ішкі есептердің өзі де ішкі есептерге бөлінуі мүмкін.
Әр қадамда ішкі есептің орындайтын негізгі функциялары анықталуы керек.
Бөлу процесі әр ішкі есеп қарапайым болғанға дейін, яғни әр ішкі есепке бір модуль сәйкес келгенше созылады.Объекті-бағытталған программалауОбъекті-бағытталған программалау тілдерінің негізгі концепциясы– құрылатын қосымша өзара байланысқан негізгі объектілерден тұрады.
Объекті-бағытталған технологияда қолданушы үш базалық элементпен: объектілер, хабар және класстармен жұмыс істейді.Объектілер дегеніміз бірнеше рет қолданылатын программалық модулдерден, яғни байланысқан мәліметтер мен процедуралардан тұрады.
Объект құрылымы екі бөліктен тұрады: айнымалылар және әдістер.
Әдістер объект функциясының алгоритмін анықтайтын процедуралар мен функциялар жиынынан тұрады.
Объектілі айнымалылар жәй мәліметтерден (сан, массив, текст) және күрделі құрылымды информациялардан (график, дыбыс т.б.) тұрады.Объектілердің өзара байланысуына хабарлар қолданылады және үш бөлімнен тұрады: объект идентификаторы, ағымдағы объектіде қолданылатын әдіс аттары және таңдалған әдіс режимін қалпына келтіретін қосымша информациялар.
Күрделі программалар бірнеше біртипті объектілерді қолдануы мүмкін.
Бұл жағдайда әр объект үшін әдістер мен айнымалылар туралы информацияны жазу тиімсіз.
Бұл мақсатқа объектілер класы деген түсінік енгізілген.
Класс дегеніміз біртипті объектілерге арналған шаблон және объектілі айнымалылар типтері мен әдістерін анықтайтын информациялардан тұрады.Объекті-бағытталған технологияға негізделген программалау тілдері: SmallTalk/v, Object  Pascal, ACT++, C++, Simula, Actor, Classic–Aga  және т.б.Объекті-бағытталған программалаудың негізгі үш принципі бар: инкапсуляция, тұқымқуалау,  полиморфизм.Логикалық программалауЛогикалық программалау тілдері PROLOG және LISP жасанды интеллект проблемаларының есептерін шешуге арналған.
LISP тілін 50-інші жылы Д.Макартни символдық информацияларды өңдеуге арнап құрды.
LISP тілінің мәліменттерінің негізгі құрылымы тізімдер, тізімнің элементтері атомдар.
Lisp тілінің бір ерекшелігі динамикалық жаңа объектілерді құру мүмкіндігі, объект есебінде программаның өзі де қатыса алады.LISP тілі және оның модификациялары символды өңдеуге арналған бағытталған программалық бөлімді құруға кең қолданады және қазіргі кезде көптеген тиімді компиляторлары бар.70-жылдары Lisp тілінің негізінде құрылған Prolog тілі логикалық программалау тілі болып табылады.
Prolog программасының негізгі элементі атом болып табылады және жеке объектілер арасындағы қарапайым қатынастарды көрсетеді, басқа программалау тілдеріне қарағанда атом түсінігінің мағыналық мәні басқа.
Тіл тек сипаттамадан тұрады және инструкциялары жоқ, яғни процедуралы емес.
Әр Prolog программа сөйлемдер жиынынан тұрады, яғни жәй тұжырымдар немесе импликациялар.
Prolog тілінің базасында эксперттік жүйелер, білімді көрсететін жүйелер, білім базасы және жаратылыс тілдерін өңдейтін жүйелер құрылады.
Prolog тілінің негізіне математикалық логика элементтері қолданылады.
Программа объектілер арасындағы қатынас терминдері арқылы сипатталады.
Логикалық программалау тілдерінің жетістігі параллель программалау принципі қолданылады.
Prolog тілінің көптеген танымал модификациялары бар, оның ішінде ең көп тарағаны – Borland фирмасының Turbo Prolog программалау жүйесі.
Жасанды интеллект проблемасына арналған жаңа логикалық және функционалды программалау тілдері құрылуда, мысалы, DURAL, VALID тілдері..